{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/log.service.ts","webpack:///./src/app/log.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","module.exports = \"\\n\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2FwcC5jb21wb25lbnQuY3NzIn0= */\"","module.exports = \"    <div id=\\\"theForm\\\">\\n      <h2>Bus Form</h2>\\n      <form #f=\\\"ngForm\\\" name=\\\"theForm\\\" (ngSubmit)=\\\"addLog(f)\\\">\\n        <div class=\\\"form-group\\\">\\n          <label>Boarded</label>\\n          \\n          <input type=\\\"number\\\"\\n                class=\\\"form-control\\\"\\n                name=\\\"boarded\\\"\\n                [(ngModel)]=\\\"log.boarded\\\"\\n                #logBoarded=\\\"ngModel\\\"\\n                pattern=\\\"^[0-9]+$\\\"\\n                required>\\n          <span class=\\\"help-block danger\\\" *ngIf=\\\"logBoarded.errors?.required && logBoarded.touched\\\">\\n            The # of boarded is required\\n          </span>\\n          <span class=\\\"help-block danger\\\" *ngIf=\\\"logBoarded.errors?.pattern && logBoarded.touched\\\">\\n            The # of boaurded can only contain numbers\\n          </span>\\n        </div>\\n\\n        <div class=\\\"form-group\\\">\\n          <label>Stop</label>\\n          <input type=\\\"text\\\"\\n                class=\\\"form-control\\\"\\n                name=\\\"stop\\\"\\n                [(ngModel)]=\\\"log.stop\\\"\\n                #logStop=\\\"ngModel\\\"\\n                pattern=\\\"^[a-zA-Z]+$\\\"\\n                required>\\n          <span class=\\\"help-block danger\\\" *ngIf=\\\"logStop.errors?.required && logStop.touched\\\">\\n            The stop name is required\\n          </span>\\n          <span class=\\\"help-block danger\\\" *ngIf=\\\"logStop.errors?.pattern && logStop.touched\\\">\\n            The stop name can only contain the letters a-z or A-Z\\n          </span>\\n        </div>\\n\\n        <!-- <div class=\\\"form-group\\\">\\n          <label>timestap</label>\\n          <input type=\\\"datetime-local\\\"\\n                class=\\\"form-control\\\"\\n                name=\\\"timestamp\\\"\\n                [(ngModel)]=\\\"log.timestamp\\\"\\n                #logTimestamp=\\\"ngModel\\\"\\n                required>\\n          <span class=\\\"help-block danger\\\" *ngIf=\\\"logTimestamp.errors?.required && logTimestamp.touched\\\">\\n            The model name is required\\n          </span>\\n          <span class=\\\"help-block danger\\\" *ngIf=\\\"logTimestamp.errors?.pattern && logTimestamp.touched\\\">\\n            The model name can only contain the letters a-z or A-Z\\n          </span>\\n        </div>\\n\\n        <div class=\\\"form-group\\\">\\n          <label>Date</label>\\n          <input type=\\\"date\\\"\\n                class=\\\"form-control\\\"\\n                name=\\\"Date\\\"\\n                [(ngModel)]=\\\"log.date\\\"\\n                #logDate=\\\"ngModel\\\"\\n                required>\\n          <span class=\\\"help-block danger\\\" *ngIf=\\\"logDate.errors?.required && logDate.touched\\\">\\n            The model name is required\\n          </span>\\n          <span class=\\\"help-block danger\\\" *ngIf=\\\"logDate.errors?.pattern && logDate.touched\\\">\\n            The model name can only contain the letters a-z or A-Z\\n          </span>\\n        </div> -->\\n\\n        <div class=\\\"form-group\\\">\\n          <label>Loop</label>\\n          <input type=\\\"text\\\"\\n                class=\\\"form-control\\\"\\n                name=\\\"loop\\\"\\n                [(ngModel)]=\\\"log.loop\\\"\\n                #logLoop=\\\"ngModel\\\"\\n                required\\n                pattern=\\\"^[a-zA-Z]+$\\\">\\n          <span class=\\\"help-block danger\\\" *ngIf=\\\"logLoop.errors?.required && logLoop.touched\\\">\\n            The loop name is required.\\n          </span>\\n          <span class=\\\"help-block danger\\\" *ngIf=\\\"logLoop.errors?.pattern && logLoop.touched\\\">\\n            The loop name can only contain the letters a-z or A-Z\\n          </span>\\n        </div>\\n\\n        <div class=\\\"form-group\\\">\\n          <label>Driver</label>\\n          <input type=\\\"text\\\"\\n                class=\\\"form-control\\\"\\n                name=\\\"driver\\\"\\n                [(ngModel)]=\\\"log.driver\\\"\\n                #logDriver=\\\"ngModel\\\"\\n                required\\n                pattern=\\\"^[a-zA-Z]+$\\\">\\n          <span class=\\\"help-block danger\\\" *ngIf=\\\"logDriver.errors?.required && logDriver.touched\\\">\\n            The driver name is required\\n          </span>\\n          <span class=\\\"help-block danger\\\" *ngIf=\\\"logDriver.errors?.pattern && logDriver.touched\\\">\\n            The driver name can only contain the letters a-z or A-Z\\n          </span>\\n        </div>\\n    \\n        <button type=\\\"submit\\\" \\n          class=\\\"btn btn-primary btn-lg btn-block\\\"\\n            [disabled]=\\\"f.invalid\\\">Add</button>\\n      </form>\\n    </div>\"","import { Component } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { Log } from './log';\nimport { LogService } from './log.service';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  logs: Log;\n  error = '';\n  success = '';\n  total = 0;\n\n  log = new Log(0, '', '', '');\n\n  constructor(private logService: LogService) {\n  }\n\n  addLog(f): void {\n    this.logService.store(this.log).subscribe(\n      (data: Log) => {\n        console.log(data);\n    \n        f.controls['boarded'].reset();\n        f.controls['stop'].reset();\n        f.controls['loop'].reset();\n      },\n      (error: any) => console.log(\"Could not add bitch\")\n      \n    );\n  }\n\n  // addCar(log: Log) {\n  //   this.resetErrors();\n\n  //   this.logService.store(this.log)\n  //     .subscribe(\n  //       (res: Log) => {\n  //         // Update the list of cars\n  //         this.logs = res;\n\n  //         // Inform the user\n  //         this.success = 'Created successfully';\n\n  //         // Reset the form\n  //         f.reset();\n  //       },\n  //       (err) => this.error = err\n  //     );\n  // }\n\n  private resetErrors(){\n    this.success = '';\n    this.error   = '';\n  }\n\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { HttpClientModule } from '@angular/common/http';\nimport { FormsModule } from '@angular/forms';\nimport { AppComponent } from './app.component';\nimport { HttpClient } from '@angular/common/http';\n\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    BrowserModule,\n    FormsModule,\n    HttpClientModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpErrorResponse, HttpHeaders } from '@angular/common/http';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { Observable, throwError } from 'rxjs';\nimport { map, catchError } from 'rxjs/operators';\n\nimport { Log } from './log';\n\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class LogService {\n  baseUrl = 'https://www.mildvariety.club/api';\n  logs: Log[];\n\n\n  \nconstructor(private http: HttpClient) { }\n\n  store(log: Log): Observable<Log> {\n    return this.http.post<Log>('https://www.mildvariety.club/api/store', { data: log })\n    .pipe(catchError(this.handleError));\n  }\n\n\n\n  /** POST: add a new hero to the database */\n// store (log: Log): Observable<Log[]> {\n//   return this.http.post<Log[]>(`${this.baseUrl}/store`, log, httpOptions)\n//     .pipe(\n//       catchError(this.handleError)\n//     );\n// }\n\n  // store(car: Log): Observable<Log[]> {\n  //   return this.http.post(`${this.baseUrl}/store`, { data: car })\n  //     .pipe(map((res) => {\n  //       this.logs.push(res['data']);\n  //       return this.logs;\n  //     }),\n  //     catchError(this.handleError));\n  // }\n\n  private handleError(error: HttpErrorResponse) {\n    console.log(\"there was an error\")\n    console.log(error);\n\n    // return an observable with a user friendly message\n    return throwError('Error! something went wrong.');\n  }\n}\n","export class Log {\n  boarded: number;\n  stop: string;\n  loop: string;\n  driver: string;\n  id?:   number;\n  constructor(\n    boarded: number,\n    stop: string,\n    loop: string,\n    driver: string,\n    id?:   number) {}\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"],"sourceRoot":""}